.PHONY: dev stop help status test reset-and-seed verify-seed functions-serve

# Core Supabase commands
dev:
	supabase start

stop:
	supabase stop

help:
	supabase --help

status:
	supabase status

test:
	supabase test

# Type generation (deprecated - types now maintained in frontend)
# gen-types:
#	@echo "Database types are now maintained directly in frontend/src/types/database.types.ts"
#	@echo "No external type generation needed as part of Supabase removal"

# Seed database with test data
reset-and-seed:
	@echo "üöÄ Full database reset and seed process..."
	@echo ""
	@echo "Step 0: Generating seed data with current ENCRYPTION_KEY..."
	@if [ -z "$$ENCRYPTION_KEY" ]; then \
		echo "‚ùå Error: ENCRYPTION_KEY environment variable is required"; \
		echo "üí° Set it in your .envrc file or export it"; \
		echo "üí° Example: export ENCRYPTION_KEY=0ipPbGjZ+qwqrzR5xPkMPrP+NgkKqfef/Stoh/dRD90="; \
		exit 1; \
	fi
	@if [ -z "$$SUPABASE_SERVICE_ROLE_KEY" ]; then \
		echo "‚ùå Error: SUPABASE_SERVICE_ROLE_KEY environment variable is required"; \
		echo "üí° Get it from: Supabase Dashboard > Settings > API > service_role key"; \
		echo "üí° Then run: SUPABASE_SERVICE_ROLE_KEY=your_key make reset-and-seed"; \
		echo "üí° Or use direnv: create .envrc with 'export SUPABASE_SERVICE_ROLE_KEY=your_key'"; \
		exit 1; \
	fi
	node generate-seed-data.js
	@echo ""
	@echo "Step 1: Resetting database with migrations and seed.sql..."
	supabase db reset
	@echo ""
	@echo "Step 2: Creating auth users with specific UUIDs..."
	@cd ../frontend && node create-seed-users.js
	@echo ""
	@echo "Step 3: Verifying seed data..."
	@$(MAKE) verify-seed
	@echo ""
	@echo "üéâ Seed setup complete! You can now login with:"
	@echo "  üìß ceo@aviat.io / password123 (3 secrets with special timing)"
	@echo "  üìß john.doe@example.com / password123 (free tier - 1 secret)"
	@echo "  üìß alice.smith@company.com / password123 (pro tier - 4 secrets)"
	@echo "  üìß bob.wilson@startup.io / password123 (pro tier - 2 secrets)"

# Verify seed data integrity
verify-seed:
	@echo "üîç Verifying database state..."
	@echo ""
	@echo "Auth Users:"
	@psql $(shell supabase status --output env | grep DB_URL | cut -d'=' -f2-) -c "SELECT id, email FROM auth.users ORDER BY email;" 2>/dev/null || echo "No auth users found"
	@echo ""
	@echo "User-Secret Summary:"
	@psql $(shell supabase status --output env | grep DB_URL | cut -d'=' -f2-) -c "SELECT u.email, COUNT(s.id) as secrets, t.name as tier_name FROM auth.users u LEFT JOIN secrets s ON u.id = s.user_id LEFT JOIN user_tiers ut ON u.id = ut.user_id LEFT JOIN tiers t ON ut.tier_id = t.id GROUP BY u.email, t.name ORDER BY u.email;" 2>/dev/null || echo "Failed to query data"

# Development functions
functions-serve:
	supabase functions serve --env-file functions/.env.development.local --no-verify-jwt

link-dev-env:
	@if [ ! -L .env ]; then ln -s ../frontend/.env.development.local .env; fi
link-staging-env:
	@if [ ! -L .env ]; then ln -s ../frontend/.env.staging.local .env; fi
link-prod-env:
	@if [ ! -L .env ]; then ln -s ../frontend/.env.production.local .env; fi

unlink-env:
	-unlink .env 2>/dev/null || true
	-unlink .env.staging 2>/dev/null || true
	-unlink .env.production 2>/dev/null || true

link-staging: unlink-env link-staging-env
	@if [ -z "$$SUPABASE_PROJECT_ID_STAGING" ]; then \
		read -p "Enter Supabase staging project ID: " project_id; \
		export SUPABASE_PROJECT_ID_STAGING=$$project_id; \
	fi
	supabase link --project-ref $$SUPABASE_PROJECT_ID_STAGING

# psql "sslmode=verify-full sslrootcert=./staging-ca-2021.crt host=aws-0-us-east-1.pooler.supabase.com dbname=postgres user=postgres.$$SUPABASE_PROJECT_ID_STAGING"
link-prod: unlink-env link-prod-env
	@if [ -z "$$SUPABASE_PROJECT_ID_PROD" ]; then \
		read -p "Enter Supabase production project ID: " project_id; \
		export SUPABASE_PROJECT_ID_PROD=$$project_id; \
	fi
	supabase link --project-ref $$SUPABASE_PROJECT_ID_PROD

deploy-db-staging: link-staging
	supabase db push --linked
deploy-db-prod: link-prod
	supabase db push --linked

deploy-config-staging: link-staging
	supabase config push --project-ref $$SUPABASE_PROJECT_ID_STAGING
deploy-config-prod: link-prod
	supabase config push --project-ref $$SUPABASE_PROJECT_ID_PROD

deploy-functions-staging: link-staging
	supabase functions deploy check-secrets
	supabase functions deploy process-reminders
	supabase functions deploy send-email
	supabase functions deploy check-in --no-verify-jwt
	echo "‚úÖ Functions deployed to staging successfully!"
deploy-functions-prod: link-prod
	supabase functions deploy check-secrets
	supabase functions deploy process-reminders
	supabase functions deploy send-email
	supabase functions deploy check-in --no-verify-jwt
	echo "‚úÖ Functions deployed to production successfully!"

deploy-staging: deploy-config-staging set-secrets-staging deploy-functions-staging deploy-db-staging
deploy-prod: deploy-config-prod set-secrets-prod deploy-functions-prod deploy-db-prod

# Set secrets for Edge Functions
set-secrets-staging: link-staging
	@echo "üîê Setting secrets for staging Edge Functions..."
	supabase secrets set DB_URL="$$(grep DB_URL .env | cut -d'=' -f2-)"
	supabase secrets set ENCRYPTION_KEY="$$(grep ENCRYPTION_KEY .env | cut -d'=' -f2-)"
	supabase secrets set SERVICE_ROLE_KEY="$$(grep SUPABASE_SERVICE_ROLE_KEY .env | cut -d'=' -f2-)"
	supabase secrets set SENDGRID_API_KEY="$$(grep SENDGRID_API_KEY .env | cut -d'=' -f2-)"
	supabase secrets set SITE_URL="$$(grep NEXT_PUBLIC_SITE_URL .env | cut -d'=' -f2-)"
	@echo "‚úÖ Secrets set for staging!"

set-secrets-prod: link-prod
	@echo "üîê Setting secrets for production Edge Functions..."
	supabase secrets set DB_URL="$$(grep DB_URL .env | cut -d'=' -f2-)"
	supabase secrets set ENCRYPTION_KEY="$$(grep ENCRYPTION_KEY .env | cut -d'=' -f2-)"
	supabase secrets set SERVICE_ROLE_KEY="$$(grep SUPABASE_SERVICE_ROLE_KEY .env | cut -d'=' -f2-)"
	supabase secrets set SENDGRID_API_KEY="$$(grep SENDGRID_API_KEY .env | cut -d'=' -f2-)"
	supabase secrets set SITE_URL="$$(grep NEXT_PUBLIC_SITE_URL .env | cut -d'=' -f2-)"
	@echo "‚úÖ Secrets set for production!"
